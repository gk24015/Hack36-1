<script src="https://rtcmulticonnection.herokuapp.com/dist/RTCMultiConnection.min.js"></script>
<script src="https://rtcmulticonnection.herokuapp.com/socket.io/socket.io.js"></script>
<div class="banner index-banner">
    <a href="/landing"> <h2 class="banner-header">CODE FOR <span class="good">GOOD</span></h2></a>
    <h3> <%= proposal.title %></h3>
    <div class="banner-inner">
        This page is home base for you and other developers working on this project. You can message each other, video chat, manage your project board and see live updates from your Github Repo.
    </div>
    <h4>Go Ahead, Code For Good!</h4>
    <h3><a href="https://github.com/<%=proposal.githubUserName%>/<%=proposal.githubRepoName%>"><i class="fab mr-2 fa-github-alt"></i></a></h3>
    <% if(currentUser !== undefined) { %>
        <a class="btn btn-primary" href="/profile/<%= currentUser.id %>"><i class="fas mr-2 fa-id-card-alt"></i>Profile</a>
        <a class="btn btn-primary" href="/logout"><i class="fas mr-2 fa-sign-out-alt"></i>Logout</a>
    <% } %>
</div>
<hr><hr><hr>

<div class="container">
    <div class="row">
        <div class="col-sm-6" style="color: blanchedalmond;">
            <div id="gitfeed">
                <button class="btn btn-warning" id='gitbutton'>Refresh Feed</button>
                <div  class="bg-dark p-2 m-3">
                <div id="gitfeedcontainer" class="scrollable">
                </div>
                </div>
            </div>
        </div>
        <hr>
      <div  class="bg-dark p-2 m-3" style="color: blanchedalmond;">
        <div class="col-sm-6" >
            <h4>Messages</h4>
            <div id="msg-box">
                <div id="msg-container"  class="scrollable" >
                    <% proposal.chat.forEach(info => { %>
                        <p><i class="fas mr-2 fa-user-tie"></i>
                        <% if(info.typer ==='msg') { %>
                            <%=info.sender%>:<%=info.text%></p>
                        <% } else if(info.typer === 'open') { %>
                            <%=info.sender%> started a video chat</p>
                        <% } else if(info.typer === 'newUser') { %>
                            <%=info.sender%> joined this project</p>
                        <% } else if(info.typer === 'deleteUser') { %>
                            <%=info.sender%> left this project</p>
                        <% } %>
                    <% }) %>
                </div>
                <div class="mt-2">
                    <input id="chat-input" type="text" placeholder="Type Message">
                    <button class="btn btn-success" id="msg-send">Send<i class="fas ml-2 fa-paper-plane"></i></button>
                </div>
            </div>
        </div>
        </div>
    </div>
    <hr><hr><hr>
    <div>
        <div>
            <div id = 'video-helper'>
                <p id="123" style="display:none;">Channel Active: </p>
            </div>
            </div>
                <input id="channel-name" type="text" placeholder="Type Channel Name">
                <button class="btn btn-primary" id="btn-open-room">Open Room</button>
                <button class="btn btn-primary" id="btn-join-room">Join Room</button>
                <button class="btn btn-primary" id="btn-Leave-room">Leave Room</button>
                <button class="btn btn-primary" id="btn-close-room">Close Room</button>
                <a href="/profile/leave/<%=proposal.id%>" class="btn btn-danger">Leave This Project</a>
               
                <div id = 'video-stream' class="bg-dark p-2 m-3"></div>
                
            </div>
        </div>
    </div>
</div>
<div id="Total Members" class="bg-dark p-2 m-3" style="color: blanchedalmond;">
     <h3>TEAM</h3>
     <ul id="total-team">
           <li><%=adminName%></li>
           
        <% names.forEach(user => { %>
            <li ><%=user%> </li>
        <% }) %>
     </ul>
</div>
<div id="active-users" class="bg-dark p-2 m-3" style="color: blanchedalmond;">
    <h3> Active Users </h3>
    <ul id="active-users-ul">
        <% activeusers.forEach(user => { %>
            <li id="<%=user.id%>"><%=user.username%> is online</li>
        <% }) %>
    </ul>
</div>





























<script src="/jquery/dist/jquery.js"></script>
<script src="/socket.io/socket.io.js"></script>
<script>
    var connection = new RTCMultiConnection();

    // this line is VERY_important
    connection.socketURL = 'https://rtcmulticonnection.herokuapp.com:443/';

    var arr = window.location.href.split('/')[4];

    var socket = io();
    socket.on('connect', () => {
        console.log('Connected');
        var e = document.getElementById('msg-container')
        e.scrollTop = e.scrollHeight;
        // socket.emit('updateFeed', arr)
    })

    var isLive = false;

    // all below lines are optional; however recommended.

    connection.session = {
        audio: true,
        video: true
    };

    connection.sdpConstraints.mandatory = {
        OfferToReceiveAudio: true,
        OfferToReceiveVideo: true
    };

    function getElem(id) {
        return document.getElementById(id);
    }

    connection.onstream = function(event) {
        getElem('video-stream').appendChild( event.mediaElement );
    };

    const roomId = getElem('channel-name');

    document.getElementById('btn-open-room').onclick = function() {
        this.disabled = true;
        var value = roomId.value;
        console.log(value);
        if(value === '')
        {
            alert('Please Provide a Room Name to Open');
            getElem('btn-open-room').removeAttribute('disabled');
        }
        else
        {
            getElem('btn-join-room').disabled = true;
            getElem('btn-Leave-room').removeAttribute('disabled');
            getElem('btn-close-room').removeAttribute('disabled');
            let info = {};
            info.roomId = value;
            info.sender = window.location.href.split('/')[5];
            info.receiver = arr;
            info.typer='open'
            // console.log(value);
            // console.log(arr);
            socket.emit('newChannel', info);
            socket.emit('newMessage', info);
            connection.open(arr + value);
        }
    };

    document.getElementById('btn-join-room').onclick = function() {
        this.disabled = true;
        var value = roomId.value;
        if(value === '')
        {
            alert('Please Provide a Room Name to Join');
            getElem('btn-join-room').removeAttribute('disabled');
        } else {
            getElem('btn-open-room').disabled = true;
            getElem('btn-Leave-room').removeAttribute('disabled');
            getElem('btn-close-room').removeAttribute('disabled');
            // console.log(arr);
            connection.join(arr + value);
        }
    };

    document.getElementById('btn-Leave-room').onclick = function() {
        connection.attachStreams.forEach(function(localStream) {
            localStream.stop();
        })
        socket.emit('closeChannelUnique', arr);
        getElem('btn-join-room').removeAttribute('disabled');
        getElem('btn-open-room').removeAttribute('disabled');
        connection.leave();
    }
    document.getElementById('btn-close-room').onclick = function() {
        this.disable = true;
        connection.attachStreams.forEach(function(localStream) {
            localStream.stop();
        })
        socket.emit('closeChannel', arr);
        getElem('btn-join-room').removeAttribute('disabled');
        getElem('btn-open-room').removeAttribute('disabled');
        toog(false);
        connection.close();
    }
    socket.on('setChannelName', (data) => {
        // console.log(arr);
        // console.log(data);
        if(arr === data.receiver)
        {
            toog('show');
            var p = document.createElement('p');
            p.setAttribute('id', 'room-name');
            p.textContent = data.roomId;
            getElem('video-helper').appendChild(p);
        }
    })
    socket.on('removeChannelName', (data) => {
        if(arr === data)
        {
            var xyz = getElem('room-name');
            if(xyz !== null)
                xyz.remove();
        }
        toog('close');
    })

    getElem('msg-send').onclick = function() {
        var obj = getElem('chat-input');
        if(obj.value === '')
            alert('type someting');
        else {
            let info = {};
            info.message = obj.value;
            info.sender = window.location.href.split('/')[5];
            info.receiver = arr;
            info.typer = 'msg';
            socket.emit('newMessage', info);
            obj.value="";
        }
    }

    socket.on('updateMessage', (data) => {
        console.log('Atleast Here');
        if(data.receiver === arr)
        {
            console.log(data);
            var e = getElem('msg-container');
            var child = e.firstElementChild;
            var p = document.createElement('p');
            if(data.typer === 'msg') {
                p.innerHTML = `<i class="fas logo-link mr-2 fa-user-tie"></i>${data.sender} : ${data.text}`;
                console.log(1);
            } else if(data.typer === 'open') {
                console.log(2);
                p.innerHTML = `<i class="fas logo-link mr-2 fa-user-tie"></i>${data.sender} started a video chat`;
            } else if(data.typer === 'newUser') {
                console.log(3);
                p.innerHTML = `<i class="fas mr-2 logo-link fa-user-tie"></i>${data.sender} joined this project`;
            } else if(data.typer === 'deleteUser') {
                console.log(4);
                p.innerHTML = `<i class="fas mr-2 logo-link fa-user-tie"></i>${data.sender} left this project`;
            }
            e.appendChild(p);
            e.scrollTop = e.scrollHeight;
        }
    })

    getElem('gitbutton').onclick = function() {
        socket.emit('updateFeed', arr);
    }

    socket.on('ReloadFeed', (data) => {
        if(data.receiver === arr)
        {
            console.log(data);
            var parent = getElem('gitfeedcontainer');
            var child = parent.lastElementChild;
            while(child) {
                parent.removeChild(child);
                child = parent.lastElementChild;
            }
            for(const info of data.array) {
                var p = document.createElement('p');
                if(info.type === 'commits')
                    p.innerHTML = `<a href=${info.link} target="_blank"><i class="fab mr-2 fa-github-alt"></i></a> ${info.user} committed on the master branch`
                else if(info.type === 'pulls')
                    p.innerHTML = `<a href=${info.link} target="_blank"><i class="fab mr-2 fa-github-alt"></i></a> ${info.user} sent a new pull request`
                else if(info.type === 'issues')
                p.innerHTML = `<a href=${info.link} target="_blank"><i class="fab mr-2 fa-github-alt"></i></a> ${info.user} filed a new issue`
                parent.appendChild(p);
            }
            getElem('gitbutton').removeAttribute('disabled');
        }
    })

    function toog(data) {
        var x = document.getElementById('123');
        if(data==='show')
            x.style.display = 'block';
        else
            x.style.display = 'none';
    }

    const developers = '<%-proposal.developerId%>'
    const developerArray = developers.split(',');
    console.log('temptemp');
    socket.on('addActiveUser', (data) => {
        console.log(data);
        const temp = developerArray.length;
        for(var i=0; i<temp; i++) {
            if(developerArray[i]===data.id) {
                var p = document.createElement('li');
                p.setAttribute('id', data.id);
                p.innerHTML = `${data.user} is active now`;
                getElem('active-users-ul').appendChild(p);
            }
        }
    })

    socket.on('deleteActiveUser', (data) => {
        console.log(data);
        var ptag = getElem(data.id);
        ptag.remove();
    })
</script>